import{C as p,bH as h}from"./kSsZQJMu.js";const o=()=>{const{$api:t}=p();return{getCart:async()=>{try{return await t("/user/userShoppingCart/listUserShoppingCart",{method:"GET"})}catch(s){throw s}},createCart:async s=>{try{return await t("/user/userShoppingCart/createUserShoppingCart",{method:"POST",body:s})}catch(a){throw a}},deleteCart:async s=>{try{return await t("/user/userShoppingCart/deleteUserShoppingCartByIdList",{method:"POST",body:s})}catch(a){throw a}},updateCart:async s=>{try{return await t("/user/userShoppingCart/updateUserShoppingCartById",{method:"POST",body:s})}catch(a){throw a}}}},n=1,c=999,d=h("cart",{state:()=>({items:[]}),getters:{itemCount:t=>t.items.reduce((r,e)=>r+e.productQuantity,0),itemList:t=>t.items},actions:{addToCart(t){const r=this.items.find(e=>e.id===t.id);r?r.quantity++:this.items.push({...t,quantity:1})},increaseQuantity(t){this.items[t].productQuantity++,this.items[t].productQuantity>c&&(this.items[t].productQuantity=c),this.updateQuantity(this.items[t].id,this.items[t].productQuantity)},decreaseQuantity(t){this.items[t].productQuantity--,this.items[t].productQuantity<n&&(this.items[t].productQuantity=n),this.updateQuantity(this.items[t].id,this.items[t].productQuantity)},async updateQuantity(t,r){try{let e={id:t,productQuantity:r};const{updateCart:i}=o(),u=await i(e)}catch(e){console.error("Failed to refresh cart:",e)}},updateCart(t){this.items=t},async refreshCart(){try{const{getCart:t}=o(),r=await t();this.items=r.result}catch(t){console.error("Failed to refresh cart:",t)}}}});export{o as c,d as u};
